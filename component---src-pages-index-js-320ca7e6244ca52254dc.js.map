{"version":3,"file":"component---src-pages-index-js-320ca7e6244ca52254dc.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/full-screen-toggle.js","webpack://gatsby-starter-blog/./src/components/return-home.js","webpack://gatsby-starter-blog/./src/components/progressbar.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import { useState, useEffect } from \"react\"\n\nfunction FullScreenToggle() {\n  const [isFullScreen, setIsFullScreen] = useState(false)\n\n  useEffect(() => {\n    const toggleFullScreen = () => {\n      if (\n        !isFullScreen &&\n        typeof document !== \"undefined\" &&\n        !document.fullscreenElement\n      ) {\n        document.documentElement.requestFullscreen().then(() => {\n          setIsFullScreen(true)\n        })\n      } else if (\n        typeof document !== \"undefined\" &&\n        document.fullscreenElement\n      ) {\n        document.exitFullscreen().then(() => {\n          setIsFullScreen(false)\n        })\n      }\n    }\n\n    const handleKeyDown = event => {\n      if (event.key === \"f\") {\n        toggleFullScreen()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeyDown)\n    }\n  }, [isFullScreen])\n\n  return null\n}\n\nexport default FullScreenToggle\n","import { useEffect } from \"react\"\nimport { navigate } from \"gatsby\"\n\nconst HomeShortcut = () => {\n  useEffect(() => {\n    const handleKeyPress = e => {\n      // remove that?\n      if (e.key === \"h\" && typeof document !== \"undefined\") {\n        navigate(\"/\")\n      }\n    }\n    if (typeof document !== \"undefined\") {\n      document.addEventListener(\"keydown\", handleKeyPress)\n    }\n    return () => {\n      if (typeof document !== \"undefined\") {\n        document.removeEventListener(\"keydown\", handleKeyPress)\n      }\n    }\n  }, [])\n\n  return null\n}\n\nexport default HomeShortcut\n","import React, { useEffect } from \"react\"\n\nfunction ProgressBar() {\n  useEffect(() => {\n    function progressbarListener() {\n      if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n        window.addEventListener(\"scroll\", function () {\n          const pageHeight = window.document.documentElement.scrollHeight\n          const windowHeight = window.innerHeight\n\n          const scrollTop =\n            window.pageYOffset || document.documentElement.scrollTop\n          const denominator = pageHeight - windowHeight\n          const scrollProgress =\n            denominator !== 0 ? (scrollTop / denominator) * 100 : 0\n          const progressBar = document.getElementById(\"page-progress-bar\")\n          progressBar.style.width = scrollProgress + \"%\"\n        })\n      }\n    }\n    progressbarListener()\n  }, [])\n\n  return (\n    <div id=\"page-progress\">\n      <div id=\"page-progress-bar\"></div>\n    </div>\n  )\n}\n\nexport default ProgressBar\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport FullScreenToggle from \"../components/full-screen-toggle\"\nimport HomeShortcut from \"./return-home\"\nimport ProgressBar from \"./progressbar\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home print:hidden\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <header className=\"global-header\">{header}</header>\n        <main>{children}</main>\n      </div>\n      <FullScreenToggle />\n      <HomeShortcut />\n      <ProgressBar />\n    </>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p className=\"prose\">\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <>\n      <Layout location={location} title={siteTitle}>\n        <ol style={{ listStyle: `none` }}>\n          {posts.map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header className=\"prose prose-a:no-underline\">\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span\n                          itemProp=\"headline\"\n                          className=\"transition duration-200 hover:underline\"\n                        >\n                          {title}\n                        </span>\n                      </Link>\n                    </h2>\n                    <small className=\"italic\">{post.frontmatter.date}</small>\n                  </header>\n                  <section className=\"\">\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n        </ol>\n      </Layout>\n    </>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"oeyoews\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["isFullScreen","setIsFullScreen","useState","useEffect","handleKeyDown","event","key","document","fullscreenElement","exitFullscreen","then","documentElement","requestFullscreen","window","addEventListener","removeEventListener","HomeShortcut","handleKeyPress","e","navigate","pageHeight","scrollHeight","windowHeight","innerHeight","scrollTop","pageYOffset","denominator","scrollProgress","getElementById","style","width","React","id","_ref","location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","className","Link","to","FullScreenToggle","ProgressBar","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","_data$site$siteMetada","data","siteTitle","posts","allMarkdownRemark","nodes","length","Layout","listStyle","map","post","frontmatter","fields","slug","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","Head","Seo"],"sourceRoot":""}